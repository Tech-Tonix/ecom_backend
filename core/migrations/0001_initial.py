# Generated by Django 4.1.7 on 2023-05-15 12:52

import datetime
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=60, unique=True)),
                ('phone_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(regex='^[0-9]+$')])),
                ('birth_date', models.DateField(default=None, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('city', models.CharField(max_length=10)),
                ('address', models.CharField(max_length=60)),
                ('postal_code', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(regex='^[0-9]+$')])),
                ('is_student', models.BooleanField(default=False)),
                ('is_member_club', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateField(default=datetime.datetime(2023, 5, 15, 12, 52, 57, 432389, tzinfo=datetime.timezone.utc))),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
